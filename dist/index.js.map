{
  "version": 3,
  "sources": ["../node_modules/@noble/bls12-381/math.js", "(disabled):crypto", "../node_modules/@noble/bls12-381/index.js", "../src/index.ts", "../src/utils.ts"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.psi2 = exports.psi = exports.millerLoop = exports.calcPairingPrecomputes = exports.isogenyMapG2 = exports.map_to_curve_simple_swu_9mod16 = exports.ProjectivePoint = exports.Fp12 = exports.Fp6 = exports.Fp2 = exports.Fr = exports.Fp = exports.powMod = exports.mod = exports.CURVE = void 0;\nexports.CURVE = {\n    P: 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn,\n    r: 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001n,\n    h: 0x396c8c005555e1568c00aaab0000aaabn,\n    Gx: 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bbn,\n    Gy: 0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1n,\n    b: 4n,\n    P2: 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn **\n        2n -\n        1n,\n    h2: 0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5n,\n    G2x: [\n        0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8n,\n        0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7en,\n    ],\n    G2y: [\n        0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801n,\n        0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79ben,\n    ],\n    b2: [4n, 4n],\n    x: 0xd201000000010000n,\n    h2Eff: 0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551n,\n};\nconst BLS_X_LEN = bitLen(exports.CURVE.x);\nfunction mod(a, b) {\n    const res = a % b;\n    return res >= 0n ? res : b + res;\n}\nexports.mod = mod;\nfunction powMod(a, power, modulo) {\n    let res = 1n;\n    while (power > 0n) {\n        if (power & 1n)\n            res = (res * a) % modulo;\n        a = (a * a) % modulo;\n        power >>= 1n;\n    }\n    return res;\n}\nexports.powMod = powMod;\nfunction genInvertBatch(cls, nums) {\n    const len = nums.length;\n    const scratch = new Array(len);\n    let acc = cls.ONE;\n    for (let i = 0; i < len; i++) {\n        if (nums[i].isZero())\n            continue;\n        scratch[i] = acc;\n        acc = acc.multiply(nums[i]);\n    }\n    acc = acc.invert();\n    for (let i = len - 1; i >= 0; i--) {\n        if (nums[i].isZero())\n            continue;\n        let tmp = acc.multiply(nums[i]);\n        nums[i] = acc.multiply(scratch[i]);\n        acc = tmp;\n    }\n    return nums;\n}\nfunction bitLen(n) {\n    let len;\n    for (len = 0; n > 0n; n >>= 1n, len += 1)\n        ;\n    return len;\n}\nfunction bitGet(n, pos) {\n    return (n >> BigInt(pos)) & 1n;\n}\nfunction invert(number, modulo = exports.CURVE.P) {\n    if (number === 0n || modulo <= 0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let [x, y, u, v] = [0n, 1n, 1n, 0n];\n    while (a !== 0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        [b, a] = [a, r];\n        [x, y] = [u, v];\n        [u, v] = [m, n];\n    }\n    const gcd = b;\n    if (gcd !== 1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nclass Fp {\n    constructor(value) {\n        this.value = mod(value, Fp.ORDER);\n    }\n    isZero() {\n        return this.value === 0n;\n    }\n    equals(rhs) {\n        return this.value === rhs.value;\n    }\n    negate() {\n        return new Fp(-this.value);\n    }\n    invert() {\n        return new Fp(invert(this.value, Fp.ORDER));\n    }\n    add(rhs) {\n        return new Fp(this.value + rhs.value);\n    }\n    square() {\n        return new Fp(this.value * this.value);\n    }\n    pow(n) {\n        return new Fp(powMod(this.value, n, Fp.ORDER));\n    }\n    sqrt() {\n        const root = this.pow((Fp.ORDER + 1n) / 4n);\n        if (!root.square().equals(this))\n            return;\n        return root;\n    }\n    subtract(rhs) {\n        return new Fp(this.value - rhs.value);\n    }\n    multiply(rhs) {\n        if (rhs instanceof Fp)\n            rhs = rhs.value;\n        return new Fp(this.value * rhs);\n    }\n    div(rhs) {\n        if (typeof rhs === 'bigint')\n            rhs = new Fp(rhs);\n        return this.multiply(rhs.invert());\n    }\n    toString() {\n        const str = this.value.toString(16).padStart(96, '0');\n        return str.slice(0, 2) + '.' + str.slice(-2);\n    }\n}\nexports.Fp = Fp;\nFp.ORDER = exports.CURVE.P;\nFp.MAX_BITS = bitLen(exports.CURVE.P);\nFp.ZERO = new Fp(0n);\nFp.ONE = new Fp(1n);\nclass Fr {\n    constructor(value) {\n        this.value = mod(value, Fr.ORDER);\n    }\n    static isValid(b) {\n        return b <= Fr.ORDER;\n    }\n    isZero() {\n        return this.value === 0n;\n    }\n    equals(rhs) {\n        return this.value === rhs.value;\n    }\n    negate() {\n        return new Fr(-this.value);\n    }\n    invert() {\n        return new Fr(invert(this.value, Fr.ORDER));\n    }\n    add(rhs) {\n        return new Fr(this.value + rhs.value);\n    }\n    square() {\n        return new Fr(this.value * this.value);\n    }\n    pow(n) {\n        return new Fr(powMod(this.value, n, Fr.ORDER));\n    }\n    subtract(rhs) {\n        return new Fr(this.value - rhs.value);\n    }\n    multiply(rhs) {\n        if (rhs instanceof Fr)\n            rhs = rhs.value;\n        return new Fr(this.value * rhs);\n    }\n    div(rhs) {\n        if (typeof rhs === 'bigint')\n            rhs = new Fr(rhs);\n        return this.multiply(rhs.invert());\n    }\n    legendre() {\n        return this.pow((Fr.ORDER - 1n) / 2n);\n    }\n    sqrt() {\n        if (!this.legendre().equals(Fr.ONE))\n            return;\n        const P = Fr.ORDER;\n        let q, s, z;\n        for (q = P - 1n, s = 0; q % 2n === 0n; q /= 2n, s++)\n            ;\n        if (s === 1)\n            return this.pow((P + 1n) / 4n);\n        for (z = 2n; z < P && new Fr(z).legendre().value !== P - 1n; z++)\n            ;\n        let c = powMod(z, q, P);\n        let r = powMod(this.value, (q + 1n) / 2n, P);\n        let t = powMod(this.value, q, P);\n        let t2 = 0n;\n        while (mod(t - 1n, P) !== 0n) {\n            t2 = mod(t * t, P);\n            let i;\n            for (i = 1; i < s; i++) {\n                if (mod(t2 - 1n, P) === 0n)\n                    break;\n                t2 = mod(t2 * t2, P);\n            }\n            let b = powMod(c, BigInt(1 << (s - i - 1)), P);\n            r = mod(r * b, P);\n            c = mod(b * b, P);\n            t = mod(t * c, P);\n            s = i;\n        }\n        return new Fr(r);\n    }\n    toString() {\n        return '0x' + this.value.toString(16).padStart(64, '0');\n    }\n}\nexports.Fr = Fr;\nFr.ORDER = exports.CURVE.r;\nFr.ZERO = new Fr(0n);\nFr.ONE = new Fr(1n);\nclass FQP {\n    zip(rhs, mapper) {\n        const c0 = this.c;\n        const c1 = rhs.c;\n        const res = [];\n        for (let i = 0; i < c0.length; i++) {\n            res.push(mapper(c0[i], c1[i]));\n        }\n        return res;\n    }\n    map(callbackfn) {\n        return this.c.map(callbackfn);\n    }\n    isZero() {\n        return this.c.every((c) => c.isZero());\n    }\n    equals(rhs) {\n        return this.zip(rhs, (left, right) => left.equals(right)).every((r) => r);\n    }\n    negate() {\n        return this.init(this.map((c) => c.negate()));\n    }\n    add(rhs) {\n        return this.init(this.zip(rhs, (left, right) => left.add(right)));\n    }\n    subtract(rhs) {\n        return this.init(this.zip(rhs, (left, right) => left.subtract(right)));\n    }\n    conjugate() {\n        return this.init([this.c[0], this.c[1].negate()]);\n    }\n    one() {\n        const el = this;\n        let one;\n        if (el instanceof Fp2)\n            one = Fp2.ONE;\n        if (el instanceof Fp6)\n            one = Fp6.ONE;\n        if (el instanceof Fp12)\n            one = Fp12.ONE;\n        return one;\n    }\n    pow(n) {\n        const elm = this;\n        const one = this.one();\n        if (n === 0n)\n            return one;\n        if (n === 1n)\n            return elm;\n        let p = one;\n        let d = elm;\n        while (n > 0n) {\n            if (n & 1n)\n                p = p.multiply(d);\n            n >>= 1n;\n            d = d.square();\n        }\n        return p;\n    }\n    div(rhs) {\n        const inv = typeof rhs === 'bigint' ? new Fp(rhs).invert().value : rhs.invert();\n        return this.multiply(inv);\n    }\n}\nclass Fp2 extends FQP {\n    constructor(coeffs) {\n        super();\n        if (coeffs.length !== 2)\n            throw new Error(`Expected array with 2 elements`);\n        coeffs.forEach((c, i) => {\n            if (typeof c === 'bigint')\n                coeffs[i] = new Fp(c);\n        });\n        this.c = coeffs;\n    }\n    init(tuple) {\n        return new Fp2(tuple);\n    }\n    toString() {\n        return `Fp2(${this.c[0]} + ${this.c[1]}\u00D7i)`;\n    }\n    get values() {\n        return this.c.map((c) => c.value);\n    }\n    multiply(rhs) {\n        if (typeof rhs === 'bigint')\n            return new Fp2(this.map((c) => c.multiply(rhs)));\n        const [c0, c1] = this.c;\n        const [r0, r1] = rhs.c;\n        let t1 = c0.multiply(r0);\n        let t2 = c1.multiply(r1);\n        return new Fp2([t1.subtract(t2), c0.add(c1).multiply(r0.add(r1)).subtract(t1.add(t2))]);\n    }\n    mulByNonresidue() {\n        const c0 = this.c[0];\n        const c1 = this.c[1];\n        return new Fp2([c0.subtract(c1), c0.add(c1)]);\n    }\n    square() {\n        const c0 = this.c[0];\n        const c1 = this.c[1];\n        const a = c0.add(c1);\n        const b = c0.subtract(c1);\n        const c = c0.add(c0);\n        return new Fp2([a.multiply(b), c.multiply(c1)]);\n    }\n    sqrt() {\n        const candidateSqrt = this.pow((Fp2.ORDER + 8n) / 16n);\n        const check = candidateSqrt.square().div(this);\n        const R = FP2_ROOTS_OF_UNITY;\n        const divisor = [R[0], R[2], R[4], R[6]].find((r) => r.equals(check));\n        if (!divisor)\n            return;\n        const index = R.indexOf(divisor);\n        const root = R[index / 2];\n        if (!root)\n            throw new Error('Invalid root');\n        const x1 = candidateSqrt.div(root);\n        const x2 = x1.negate();\n        const [re1, im1] = x1.values;\n        const [re2, im2] = x2.values;\n        if (im1 > im2 || (im1 === im2 && re1 > re2))\n            return x1;\n        return x2;\n    }\n    invert() {\n        const [a, b] = this.values;\n        const factor = new Fp(a * a + b * b).invert();\n        return new Fp2([factor.multiply(new Fp(a)), factor.multiply(new Fp(-b))]);\n    }\n    frobeniusMap(power) {\n        return new Fp2([this.c[0], this.c[1].multiply(FP2_FROBENIUS_COEFFICIENTS[power % 2])]);\n    }\n    multiplyByB() {\n        let [c0, c1] = this.c;\n        let t0 = c0.multiply(4n);\n        let t1 = c1.multiply(4n);\n        return new Fp2([t0.subtract(t1), t0.add(t1)]);\n    }\n}\nexports.Fp2 = Fp2;\nFp2.ORDER = exports.CURVE.P2;\nFp2.MAX_BITS = bitLen(exports.CURVE.P2);\nFp2.ZERO = new Fp2([0n, 0n]);\nFp2.ONE = new Fp2([1n, 0n]);\nclass Fp6 extends FQP {\n    constructor(c) {\n        super();\n        this.c = c;\n        if (c.length !== 3)\n            throw new Error(`Expected array with 3 elements`);\n    }\n    static fromTuple(t) {\n        if (!Array.isArray(t) || t.length !== 6)\n            throw new Error('Invalid Fp6 usage');\n        return new Fp6([new Fp2(t.slice(0, 2)), new Fp2(t.slice(2, 4)), new Fp2(t.slice(4, 6))]);\n    }\n    init(triple) {\n        return new Fp6(triple);\n    }\n    toString() {\n        return `Fp6(${this.c[0]} + ${this.c[1]} * v, ${this.c[2]} * v^2)`;\n    }\n    conjugate() {\n        throw new TypeError('No conjugate on Fp6');\n    }\n    multiply(rhs) {\n        if (typeof rhs === 'bigint')\n            return new Fp6([this.c[0].multiply(rhs), this.c[1].multiply(rhs), this.c[2].multiply(rhs)]);\n        let [c0, c1, c2] = this.c;\n        const [r0, r1, r2] = rhs.c;\n        let t0 = c0.multiply(r0);\n        let t1 = c1.multiply(r1);\n        let t2 = c2.multiply(r2);\n        return new Fp6([\n            t0.add(c1.add(c2).multiply(r1.add(r2)).subtract(t1.add(t2)).mulByNonresidue()),\n            c0.add(c1).multiply(r0.add(r1)).subtract(t0.add(t1)).add(t2.mulByNonresidue()),\n            t1.add(c0.add(c2).multiply(r0.add(r2)).subtract(t0.add(t2))),\n        ]);\n    }\n    mulByNonresidue() {\n        return new Fp6([this.c[2].mulByNonresidue(), this.c[0], this.c[1]]);\n    }\n    multiplyBy1(b1) {\n        return new Fp6([\n            this.c[2].multiply(b1).mulByNonresidue(),\n            this.c[0].multiply(b1),\n            this.c[1].multiply(b1),\n        ]);\n    }\n    multiplyBy01(b0, b1) {\n        let [c0, c1, c2] = this.c;\n        let t0 = c0.multiply(b0);\n        let t1 = c1.multiply(b1);\n        return new Fp6([\n            c1.add(c2).multiply(b1).subtract(t1).mulByNonresidue().add(t0),\n            b0.add(b1).multiply(c0.add(c1)).subtract(t0).subtract(t1),\n            c0.add(c2).multiply(b0).subtract(t0).add(t1),\n        ]);\n    }\n    multiplyByFp2(rhs) {\n        return new Fp6(this.map((c) => c.multiply(rhs)));\n    }\n    square() {\n        let [c0, c1, c2] = this.c;\n        let t0 = c0.square();\n        let t1 = c0.multiply(c1).multiply(2n);\n        let t3 = c1.multiply(c2).multiply(2n);\n        let t4 = c2.square();\n        return new Fp6([\n            t3.mulByNonresidue().add(t0),\n            t4.mulByNonresidue().add(t1),\n            t1.add(c0.subtract(c1).add(c2).square()).add(t3).subtract(t0).subtract(t4),\n        ]);\n    }\n    invert() {\n        let [c0, c1, c2] = this.c;\n        let t0 = c0.square().subtract(c2.multiply(c1).mulByNonresidue());\n        let t1 = c2.square().mulByNonresidue().subtract(c0.multiply(c1));\n        let t2 = c1.square().subtract(c0.multiply(c2));\n        let t4 = c2.multiply(t1).add(c1.multiply(t2)).mulByNonresidue().add(c0.multiply(t0)).invert();\n        return new Fp6([t4.multiply(t0), t4.multiply(t1), t4.multiply(t2)]);\n    }\n    frobeniusMap(power) {\n        return new Fp6([\n            this.c[0].frobeniusMap(power),\n            this.c[1].frobeniusMap(power).multiply(FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),\n            this.c[2].frobeniusMap(power).multiply(FP6_FROBENIUS_COEFFICIENTS_2[power % 6]),\n        ]);\n    }\n}\nexports.Fp6 = Fp6;\nFp6.ZERO = new Fp6([Fp2.ZERO, Fp2.ZERO, Fp2.ZERO]);\nFp6.ONE = new Fp6([Fp2.ONE, Fp2.ZERO, Fp2.ZERO]);\nclass Fp12 extends FQP {\n    constructor(c) {\n        super();\n        this.c = c;\n        if (c.length !== 2)\n            throw new Error(`Expected array with 2 elements`);\n    }\n    static fromTuple(t) {\n        return new Fp12([\n            Fp6.fromTuple(t.slice(0, 6)),\n            Fp6.fromTuple(t.slice(6, 12)),\n        ]);\n    }\n    init(c) {\n        return new Fp12(c);\n    }\n    toString() {\n        return `Fp12(${this.c[0]} + ${this.c[1]} * w)`;\n    }\n    multiply(rhs) {\n        if (typeof rhs === 'bigint')\n            return new Fp12([this.c[0].multiply(rhs), this.c[1].multiply(rhs)]);\n        let [c0, c1] = this.c;\n        const [r0, r1] = rhs.c;\n        let t1 = c0.multiply(r0);\n        let t2 = c1.multiply(r1);\n        return new Fp12([\n            t1.add(t2.mulByNonresidue()),\n            c0.add(c1).multiply(r0.add(r1)).subtract(t1.add(t2)),\n        ]);\n    }\n    multiplyBy014(o0, o1, o4) {\n        let [c0, c1] = this.c;\n        let [t0, t1] = [c0.multiplyBy01(o0, o1), c1.multiplyBy1(o4)];\n        return new Fp12([\n            t1.mulByNonresidue().add(t0),\n            c1.add(c0).multiplyBy01(o0, o1.add(o4)).subtract(t0).subtract(t1),\n        ]);\n    }\n    multiplyByFp2(rhs) {\n        return this.init(this.map((c) => c.multiplyByFp2(rhs)));\n    }\n    square() {\n        let [c0, c1] = this.c;\n        let ab = c0.multiply(c1);\n        return new Fp12([\n            c1.mulByNonresidue().add(c0).multiply(c0.add(c1)).subtract(ab).subtract(ab.mulByNonresidue()),\n            ab.add(ab),\n        ]);\n    }\n    invert() {\n        let [c0, c1] = this.c;\n        let t = c0.square().subtract(c1.square().mulByNonresidue()).invert();\n        return new Fp12([c0.multiply(t), c1.multiply(t).negate()]);\n    }\n    frobeniusMap(power) {\n        const [c0, c1] = this.c;\n        let r0 = c0.frobeniusMap(power);\n        let [c1_0, c1_1, c1_2] = c1.frobeniusMap(power).c;\n        const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];\n        return new Fp12([\n            r0,\n            new Fp6([c1_0.multiply(coeff), c1_1.multiply(coeff), c1_2.multiply(coeff)]),\n        ]);\n    }\n    Fp4Square(a, b) {\n        const a2 = a.square(), b2 = b.square();\n        return [\n            b2.mulByNonresidue().add(a2),\n            a.add(b).square().subtract(a2).subtract(b2),\n        ];\n    }\n    cyclotomicSquare() {\n        const [c0, c1] = this.c;\n        const [c0c0, c0c1, c0c2] = c0.c;\n        const [c1c0, c1c1, c1c2] = c1.c;\n        let [t3, t4] = this.Fp4Square(c0c0, c1c1);\n        let [t5, t6] = this.Fp4Square(c1c0, c0c2);\n        let [t7, t8] = this.Fp4Square(c0c1, c1c2);\n        let t9 = t8.mulByNonresidue();\n        return new Fp12([\n            new Fp6([\n                t3.subtract(c0c0).multiply(2n).add(t3),\n                t5.subtract(c0c1).multiply(2n).add(t5),\n                t7.subtract(c0c2).multiply(2n).add(t7),\n            ]),\n            new Fp6([\n                t9.add(c1c0).multiply(2n).add(t9),\n                t4.add(c1c1).multiply(2n).add(t4),\n                t6.add(c1c2).multiply(2n).add(t6),\n            ]),\n        ]);\n    }\n    cyclotomicExp(n) {\n        let z = Fp12.ONE;\n        for (let i = BLS_X_LEN - 1; i >= 0; i--) {\n            z = z.cyclotomicSquare();\n            if (bitGet(n, i))\n                z = z.multiply(this);\n        }\n        return z;\n    }\n    finalExponentiate() {\n        const { x } = exports.CURVE;\n        const t0 = this.frobeniusMap(6).div(this);\n        const t1 = t0.frobeniusMap(2).multiply(t0);\n        const t2 = t1.cyclotomicExp(x).conjugate();\n        const t3 = t1.cyclotomicSquare().conjugate().multiply(t2);\n        const t4 = t3.cyclotomicExp(x).conjugate();\n        const t5 = t4.cyclotomicExp(x).conjugate();\n        const t6 = t5.cyclotomicExp(x).conjugate().multiply(t2.cyclotomicSquare());\n        const t7 = t6.cyclotomicExp(x).conjugate();\n        const t2_t5_pow_q2 = t2.multiply(t5).frobeniusMap(2);\n        const t4_t1_pow_q3 = t4.multiply(t1).frobeniusMap(3);\n        const t6_t1c_pow_q1 = t6.multiply(t1.conjugate()).frobeniusMap(1);\n        const t7_t3c_t1 = t7.multiply(t3.conjugate()).multiply(t1);\n        return t2_t5_pow_q2.multiply(t4_t1_pow_q3).multiply(t6_t1c_pow_q1).multiply(t7_t3c_t1);\n    }\n}\nexports.Fp12 = Fp12;\nFp12.ZERO = new Fp12([Fp6.ZERO, Fp6.ZERO]);\nFp12.ONE = new Fp12([Fp6.ONE, Fp6.ZERO]);\nclass ProjectivePoint {\n    constructor(x, y, z, C) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.C = C;\n    }\n    isZero() {\n        return this.z.isZero();\n    }\n    createPoint(x, y, z) {\n        return new this.constructor(x, y, z);\n    }\n    getZero() {\n        return this.createPoint(this.C.ONE, this.C.ONE, this.C.ZERO);\n    }\n    equals(rhs) {\n        if (this.constructor !== rhs.constructor)\n            throw new Error(`ProjectivePoint#equals: this is ${this.constructor}, but rhs is ${rhs.constructor}`);\n        const a = this;\n        const b = rhs;\n        const xe = a.x.multiply(b.z).equals(b.x.multiply(a.z));\n        const ye = a.y.multiply(b.z).equals(b.y.multiply(a.z));\n        return xe && ye;\n    }\n    negate() {\n        return this.createPoint(this.x, this.y.negate(), this.z);\n    }\n    toString(isAffine = true) {\n        if (!isAffine) {\n            return `Point<x=${this.x}, y=${this.y}, z=${this.z}>`;\n        }\n        const [x, y] = this.toAffine();\n        return `Point<x=${x}, y=${y}>`;\n    }\n    fromAffineTuple(xy) {\n        return this.createPoint(xy[0], xy[1], this.C.ONE);\n    }\n    toAffine(invZ = this.z.invert()) {\n        return [this.x.multiply(invZ), this.y.multiply(invZ)];\n    }\n    toAffineBatch(points) {\n        const toInv = genInvertBatch(this.C, points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    normalizeZ(points) {\n        return this.toAffineBatch(points).map((t) => this.fromAffineTuple(t));\n    }\n    double() {\n        const { x, y, z } = this;\n        const W = x.multiply(x).multiply(3n);\n        const S = y.multiply(z);\n        const SS = S.multiply(S);\n        const SSS = SS.multiply(S);\n        const B = x.multiply(y).multiply(S);\n        const H = W.multiply(W).subtract(B.multiply(8n));\n        const X3 = H.multiply(S).multiply(2n);\n        const Y3 = W.multiply(B.multiply(4n).subtract(H)).subtract(y.multiply(y).multiply(8n).multiply(SS));\n        const Z3 = SSS.multiply(8n);\n        return this.createPoint(X3, Y3, Z3);\n    }\n    add(rhs) {\n        if (this.constructor !== rhs.constructor)\n            throw new Error(`ProjectivePoint#add: this is ${this.constructor}, but rhs is ${rhs.constructor}`);\n        const p1 = this;\n        const p2 = rhs;\n        if (p1.isZero())\n            return p2;\n        if (p2.isZero())\n            return p1;\n        const X1 = p1.x;\n        const Y1 = p1.y;\n        const Z1 = p1.z;\n        const X2 = p2.x;\n        const Y2 = p2.y;\n        const Z2 = p2.z;\n        const U1 = Y2.multiply(Z1);\n        const U2 = Y1.multiply(Z2);\n        const V1 = X2.multiply(Z1);\n        const V2 = X1.multiply(Z2);\n        if (V1.equals(V2) && U1.equals(U2))\n            return this.double();\n        if (V1.equals(V2))\n            return this.getZero();\n        const U = U1.subtract(U2);\n        const V = V1.subtract(V2);\n        const VV = V.multiply(V);\n        const VVV = VV.multiply(V);\n        const V2VV = V2.multiply(VV);\n        const W = Z1.multiply(Z2);\n        const A = U.multiply(U).multiply(W).subtract(VVV).subtract(V2VV.multiply(2n));\n        const X3 = V.multiply(A);\n        const Y3 = U.multiply(V2VV.subtract(A)).subtract(VVV.multiply(U2));\n        const Z3 = VVV.multiply(W);\n        return this.createPoint(X3, Y3, Z3);\n    }\n    subtract(rhs) {\n        if (this.constructor !== rhs.constructor)\n            throw new Error(`ProjectivePoint#subtract: this is ${this.constructor}, but rhs is ${rhs.constructor}`);\n        return this.add(rhs.negate());\n    }\n    validateScalar(n) {\n        if (typeof n === 'number')\n            n = BigInt(n);\n        if (typeof n !== 'bigint' || n <= 0 || n > exports.CURVE.r) {\n            throw new Error(`Point#multiply: invalid scalar, expected positive integer < CURVE.r. Got: ${n}`);\n        }\n        return n;\n    }\n    multiplyUnsafe(scalar) {\n        let n = this.validateScalar(scalar);\n        let point = this.getZero();\n        let d = this;\n        while (n > 0n) {\n            if (n & 1n)\n                point = point.add(d);\n            d = d.double();\n            n >>= 1n;\n        }\n        return point;\n    }\n    multiply(scalar) {\n        let n = this.validateScalar(scalar);\n        let point = this.getZero();\n        let fake = this.getZero();\n        let d = this;\n        let bits = Fp.ORDER;\n        while (bits > 0n) {\n            if (n & 1n) {\n                point = point.add(d);\n            }\n            else {\n                fake = fake.add(d);\n            }\n            d = d.double();\n            n >>= 1n;\n            bits >>= 1n;\n        }\n        return point;\n    }\n    maxBits() {\n        return this.C.MAX_BITS;\n    }\n    precomputeWindow(W) {\n        const windows = Math.ceil(this.maxBits() / W);\n        const windowSize = 2 ** (W - 1);\n        let points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < windowSize; i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    calcMultiplyPrecomputes(W) {\n        if (this._MPRECOMPUTES)\n            throw new Error('This point already has precomputes');\n        this._MPRECOMPUTES = [W, this.normalizeZ(this.precomputeWindow(W))];\n    }\n    clearMultiplyPrecomputes() {\n        this._MPRECOMPUTES = undefined;\n    }\n    wNAF(n) {\n        let W, precomputes;\n        if (this._MPRECOMPUTES) {\n            [W, precomputes] = this._MPRECOMPUTES;\n        }\n        else {\n            W = 1;\n            precomputes = this.precomputeWindow(W);\n        }\n        let [p, f] = [this.getZero(), this.getZero()];\n        const windows = Math.ceil(this.maxBits() / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += 1n;\n            }\n            if (wbits === 0) {\n                f = f.add(window % 2 ? precomputes[offset].negate() : precomputes[offset]);\n            }\n            else {\n                const cached = precomputes[offset + Math.abs(wbits) - 1];\n                p = p.add(wbits < 0 ? cached.negate() : cached);\n            }\n        }\n        return [p, f];\n    }\n    multiplyPrecomputed(scalar) {\n        return this.wNAF(this.validateScalar(scalar))[0];\n    }\n}\nexports.ProjectivePoint = ProjectivePoint;\nfunction sgn0(x) {\n    const [x0, x1] = x.values;\n    const sign_0 = x0 % 2n;\n    const zero_0 = x0 === 0n;\n    const sign_1 = x1 % 2n;\n    return BigInt(sign_0 || (zero_0 && sign_1));\n}\nconst P_MINUS_9_DIV_16 = (exports.CURVE.P ** 2n - 9n) / 16n;\nfunction sqrt_div_fp2(u, v) {\n    const v7 = v.pow(7n);\n    const uv7 = u.multiply(v7);\n    const uv15 = uv7.multiply(v7.multiply(v));\n    const gamma = uv15.pow(P_MINUS_9_DIV_16).multiply(uv7);\n    let success = false;\n    let result = gamma;\n    const positiveRootsOfUnity = FP2_ROOTS_OF_UNITY.slice(0, 4);\n    for (const root of positiveRootsOfUnity) {\n        const candidate = root.multiply(gamma);\n        if (candidate.pow(2n).multiply(v).subtract(u).isZero() && !success) {\n            success = true;\n            result = candidate;\n        }\n    }\n    return [success, result];\n}\nfunction map_to_curve_simple_swu_9mod16(t) {\n    const iso_3_a = new Fp2([0n, 240n]);\n    const iso_3_b = new Fp2([1012n, 1012n]);\n    const iso_3_z = new Fp2([-2n, -1n]);\n    if (Array.isArray(t))\n        t = new Fp2(t);\n    const t2 = t.pow(2n);\n    const iso_3_z_t2 = iso_3_z.multiply(t2);\n    const ztzt = iso_3_z_t2.add(iso_3_z_t2.pow(2n));\n    let denominator = iso_3_a.multiply(ztzt).negate();\n    let numerator = iso_3_b.multiply(ztzt.add(Fp2.ONE));\n    if (denominator.isZero())\n        denominator = iso_3_z.multiply(iso_3_a);\n    let v = denominator.pow(3n);\n    let u = numerator\n        .pow(3n)\n        .add(iso_3_a.multiply(numerator).multiply(denominator.pow(2n)))\n        .add(iso_3_b.multiply(v));\n    const [success, sqrtCandidateOrGamma] = sqrt_div_fp2(u, v);\n    let y;\n    if (success)\n        y = sqrtCandidateOrGamma;\n    const sqrtCandidateX1 = sqrtCandidateOrGamma.multiply(t.pow(3n));\n    u = iso_3_z_t2.pow(3n).multiply(u);\n    let success2 = false;\n    for (const eta of FP2_ETAs) {\n        const etaSqrtCandidate = eta.multiply(sqrtCandidateX1);\n        const temp = etaSqrtCandidate.pow(2n).multiply(v).subtract(u);\n        if (temp.isZero() && !success && !success2) {\n            y = etaSqrtCandidate;\n            success2 = true;\n        }\n    }\n    if (!success && !success2)\n        throw new Error('Hash to Curve - Optimized SWU failure');\n    if (success2)\n        numerator = numerator.multiply(iso_3_z_t2);\n    y = y;\n    if (sgn0(t) !== sgn0(y))\n        y = y.negate();\n    y = y.multiply(denominator);\n    return [numerator, y, denominator];\n}\nexports.map_to_curve_simple_swu_9mod16 = map_to_curve_simple_swu_9mod16;\nfunction isogenyMapG2(xyz) {\n    const [x, y, z] = xyz;\n    const zz = z.multiply(z);\n    const zzz = zz.multiply(z);\n    const zPowers = [z, zz, zzz];\n    const mapped = [Fp2.ZERO, Fp2.ZERO, Fp2.ZERO, Fp2.ZERO];\n    for (let i = 0; i < ISOGENY_COEFFICIENTS.length; i++) {\n        const k_i = ISOGENY_COEFFICIENTS[i];\n        mapped[i] = k_i.slice(-1)[0];\n        const arr = k_i.slice(0, -1).reverse();\n        for (let j = 0; j < arr.length; j++) {\n            const k_i_j = arr[j];\n            mapped[i] = mapped[i].multiply(x).add(zPowers[j].multiply(k_i_j));\n        }\n    }\n    mapped[2] = mapped[2].multiply(y);\n    mapped[3] = mapped[3].multiply(z);\n    const z2 = mapped[1].multiply(mapped[3]);\n    const x2 = mapped[0].multiply(mapped[3]);\n    const y2 = mapped[1].multiply(mapped[2]);\n    return [x2, y2, z2];\n}\nexports.isogenyMapG2 = isogenyMapG2;\nfunction calcPairingPrecomputes(x, y) {\n    const [Qx, Qy, Qz] = [x, y, Fp2.ONE];\n    let [Rx, Ry, Rz] = [Qx, Qy, Qz];\n    let ell_coeff = [];\n    for (let i = BLS_X_LEN - 2; i >= 0; i--) {\n        let t0 = Ry.square();\n        let t1 = Rz.square();\n        let t2 = t1.multiply(3n).multiplyByB();\n        let t3 = t2.multiply(3n);\n        let t4 = Ry.add(Rz).square().subtract(t1).subtract(t0);\n        ell_coeff.push([\n            t2.subtract(t0),\n            Rx.square().multiply(3n),\n            t4.negate(),\n        ]);\n        Rx = t0.subtract(t3).multiply(Rx).multiply(Ry).div(2n);\n        Ry = t0.add(t3).div(2n).square().subtract(t2.square().multiply(3n));\n        Rz = t0.multiply(t4);\n        if (bitGet(exports.CURVE.x, i)) {\n            let t0 = Ry.subtract(Qy.multiply(Rz));\n            let t1 = Rx.subtract(Qx.multiply(Rz));\n            ell_coeff.push([\n                t0.multiply(Qx).subtract(t1.multiply(Qy)),\n                t0.negate(),\n                t1,\n            ]);\n            let t2 = t1.square();\n            let t3 = t2.multiply(t1);\n            let t4 = t2.multiply(Rx);\n            let t5 = t3.subtract(t4.multiply(2n)).add(t0.square().multiply(Rz));\n            Rx = t1.multiply(t5);\n            Ry = t4.subtract(t5).multiply(t0).subtract(t3.multiply(Ry));\n            Rz = Rz.multiply(t3);\n        }\n    }\n    return ell_coeff;\n}\nexports.calcPairingPrecomputes = calcPairingPrecomputes;\nfunction millerLoop(ell, g1) {\n    let f12 = Fp12.ONE;\n    const [x, y] = g1;\n    const [Px, Py] = [x, y];\n    for (let j = 0, i = BLS_X_LEN - 2; i >= 0; i--, j++) {\n        f12 = f12.multiplyBy014(ell[j][0], ell[j][1].multiply(Px.value), ell[j][2].multiply(Py.value));\n        if (bitGet(exports.CURVE.x, i)) {\n            j += 1;\n            f12 = f12.multiplyBy014(ell[j][0], ell[j][1].multiply(Px.value), ell[j][2].multiply(Py.value));\n        }\n        if (i !== 0)\n            f12 = f12.square();\n    }\n    return f12.conjugate();\n}\nexports.millerLoop = millerLoop;\nconst ut_root = new Fp6([Fp2.ZERO, Fp2.ONE, Fp2.ZERO]);\nconst wsq = new Fp12([ut_root, Fp6.ZERO]);\nconst wsq_inv = wsq.invert();\nconst wcu = new Fp12([Fp6.ZERO, ut_root]);\nconst wcu_inv = wcu.invert();\nfunction psi(x, y) {\n    const x2 = wsq_inv.multiplyByFp2(x).frobeniusMap(1).multiply(wsq).c[0].c[0];\n    const y2 = wcu_inv.multiplyByFp2(y).frobeniusMap(1).multiply(wcu).c[0].c[0];\n    return [x2, y2];\n}\nexports.psi = psi;\nfunction psi2(x, y) {\n    return [x.multiply(PSI2_C1), y.negate()];\n}\nexports.psi2 = psi2;\nconst PSI2_C1 = 0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn;\nconst rv1 = 0x6af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09n;\nconst ev1 = 0x699be3b8c6870965e5bf892ad5d2cc7b0e85a117402dfd83b7f4a947e02d978498255a2aaec0ac627b5afbdf1bf1c90n;\nconst ev2 = 0x8157cd83046453f5dd0972b6e3949e4288020b5b8a9cc99ca07e27089a2ce2436d965026adad3ef7baba37f2183e9b5n;\nconst ev3 = 0xab1c2ffdd6c253ca155231eb3e71ba044fd562f6f72bc5bad5ec46a0b7a3b0247cf08ce6c6317f40edbc653a72dee17n;\nconst ev4 = 0xaa404866706722864480885d68ad0ccac1967c7544b447873cc37e0181271e006df72162a3d3e0287bf597fbf7f8fc1n;\nconst FP2_FROBENIUS_COEFFICIENTS = [\n    0x1n,\n    0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaan,\n].map((item) => new Fp(item));\nconst FP2_ROOTS_OF_UNITY = [\n    [1n, 0n],\n    [rv1, -rv1],\n    [0n, 1n],\n    [rv1, rv1],\n    [-1n, 0n],\n    [-rv1, rv1],\n    [0n, -1n],\n    [-rv1, -rv1],\n].map((pair) => new Fp2(pair));\nconst FP2_ETAs = [\n    [ev1, ev2],\n    [-ev2, ev1],\n    [ev3, ev4],\n    [-ev4, ev3],\n].map((pair) => new Fp2(pair));\nconst FP6_FROBENIUS_COEFFICIENTS_1 = [\n    [0x1n, 0x0n],\n    [\n        0x0n,\n        0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn,\n    ],\n    [\n        0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen,\n        0x0n,\n    ],\n    [0x0n, 0x1n],\n    [\n        0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn,\n        0x0n,\n    ],\n    [\n        0x0n,\n        0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen,\n    ],\n].map((pair) => new Fp2(pair));\nconst FP6_FROBENIUS_COEFFICIENTS_2 = [\n    [0x1n, 0x0n],\n    [\n        0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaadn,\n        0x0n,\n    ],\n    [\n        0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn,\n        0x0n,\n    ],\n    [\n        0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaan,\n        0x0n,\n    ],\n    [\n        0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen,\n        0x0n,\n    ],\n    [\n        0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffffn,\n        0x0n,\n    ],\n].map((pair) => new Fp2(pair));\nconst FP12_FROBENIUS_COEFFICIENTS = [\n    [0x1n, 0x0n],\n    [\n        0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8n,\n        0x00fc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3n,\n    ],\n    [\n        0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffffn,\n        0x0n,\n    ],\n    [\n        0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2n,\n        0x06af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09n,\n    ],\n    [\n        0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffen,\n        0x0n,\n    ],\n    [\n        0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995n,\n        0x05b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116n,\n    ],\n    [\n        0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaan,\n        0x0n,\n    ],\n    [\n        0x00fc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3n,\n        0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8n,\n    ],\n    [\n        0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn,\n        0x0n,\n    ],\n    [\n        0x06af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09n,\n        0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2n,\n    ],\n    [\n        0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaadn,\n        0x0n,\n    ],\n    [\n        0x05b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116n,\n        0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995n,\n    ],\n].map((pair) => new Fp2(pair));\nconst xnum = [\n    [\n        0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6n,\n        0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6n,\n    ],\n    [\n        0x0n,\n        0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71an,\n    ],\n    [\n        0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71en,\n        0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38dn,\n    ],\n    [\n        0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1n,\n        0x0n,\n    ],\n].map((pair) => new Fp2(pair));\nconst xden = [\n    [\n        0x0n,\n        0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63n,\n    ],\n    [\n        0xcn,\n        0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9fn,\n    ],\n    [0x1n, 0x0n],\n    [0x0n, 0x0n],\n].map((pair) => new Fp2(pair));\nconst ynum = [\n    [\n        0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706n,\n        0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706n,\n    ],\n    [\n        0x0n,\n        0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97ben,\n    ],\n    [\n        0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71cn,\n        0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38fn,\n    ],\n    [\n        0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10n,\n        0x0n,\n    ],\n].map((pair) => new Fp2(pair));\nconst yden = [\n    [\n        0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fbn,\n        0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fbn,\n    ],\n    [\n        0x0n,\n        0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3n,\n    ],\n    [\n        0x12n,\n        0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99n,\n    ],\n    [0x1n, 0x0n],\n].map((pair) => new Fp2(pair));\nconst ISOGENY_COEFFICIENTS = [xnum, xden, ynum, yden];\n", "", "\"use strict\";\n/*! noble-bls12-381 - MIT License (c) Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.verifyBatch = exports.aggregateSignatures = exports.aggregatePublicKeys = exports.verify = exports.sign = exports.getPublicKey = exports.pairing = exports.PointG2 = exports.PointG1 = exports.utils = exports.CURVE = exports.Fp12 = exports.Fp2 = exports.Fr = exports.Fp = void 0;\nconst math_1 = require(\"./math\");\nObject.defineProperty(exports, \"Fp\", { enumerable: true, get: function () { return math_1.Fp; } });\nObject.defineProperty(exports, \"Fr\", { enumerable: true, get: function () { return math_1.Fr; } });\nObject.defineProperty(exports, \"Fp2\", { enumerable: true, get: function () { return math_1.Fp2; } });\nObject.defineProperty(exports, \"Fp12\", { enumerable: true, get: function () { return math_1.Fp12; } });\nObject.defineProperty(exports, \"CURVE\", { enumerable: true, get: function () { return math_1.CURVE; } });\nconst POW_2_381 = 2n ** 381n;\nconst POW_2_382 = POW_2_381 * 2n;\nconst POW_2_383 = POW_2_382 * 2n;\nconst PUBLIC_KEY_LENGTH = 48;\nconst SHA256_DIGEST_SIZE = 32;\nconst htfDefaults = {\n    DST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n    p: math_1.CURVE.P,\n    m: 2,\n    k: 128,\n    expand: true,\n};\nfunction isWithinCurveOrder(num) {\n    return 0 < num && num < math_1.CURVE.r;\n}\nconst crypto = (() => {\n    const webCrypto = typeof self === 'object' && 'crypto' in self ? self.crypto : undefined;\n    const nodeRequire = typeof module !== 'undefined' && typeof require === 'function';\n    return {\n        node: nodeRequire && !webCrypto ? require('crypto') : undefined,\n        web: webCrypto,\n    };\n})();\nexports.utils = {\n    hashToField: hash_to_field,\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        let i = 8;\n        while (i--) {\n            const b32 = exports.utils.randomBytes(32);\n            const num = bytesToNumberBE(b32);\n            if (isWithinCurveOrder(num) && num !== 1n)\n                return b32;\n        }\n        throw new Error('Valid private key was not found in 8 iterations. PRNG is broken');\n    },\n    sha256: async (message) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha256').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    mod: math_1.mod,\n    getDSTLabel() {\n        return htfDefaults.DST;\n    },\n    setDSTLabel(newLabel) {\n        if (typeof newLabel !== 'string' || newLabel.length > 2048 || newLabel.length === 0) {\n            throw new TypeError('Invalid DST');\n        }\n        htfDefaults.DST = newLabel;\n    },\n};\nfunction bytesToNumberBE(bytes) {\n    let value = 0n;\n    for (let i = bytes.length - 1, j = 0; i >= 0; i--, j++) {\n        value += (BigInt(bytes[i]) & 255n) << (8n * BigInt(j));\n    }\n    return value;\n}\nfunction bytesToHex(uint8a) {\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += uint8a[i].toString(16).padStart(2, '0');\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        array[i] = Number.parseInt(hex.slice(j, j + 2), 16);\n    }\n    return array;\n}\nfunction toPaddedHex(num, padding) {\n    if (num < 0n)\n        throw new Error('Expected valid number');\n    if (typeof padding !== 'number')\n        throw new TypeError('Expected valid padding');\n    return num.toString(16).padStart(padding * 2, '0');\n}\nfunction ensureBytes(hex) {\n    if (hex instanceof Uint8Array)\n        return hex;\n    if (typeof hex === 'string')\n        return hexToBytes(hex);\n    throw new TypeError('Expected hex string or Uint8Array');\n}\nfunction concatBytes(...arrays) {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction stringToBytes(str) {\n    const bytes = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n        bytes[i] = str.charCodeAt(i);\n    }\n    return bytes;\n}\nfunction os2ip(bytes) {\n    let result = 0n;\n    for (let i = 0; i < bytes.length; i++) {\n        result <<= 8n;\n        result += BigInt(bytes[i]);\n    }\n    return result;\n}\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nasync function expand_message_xmd(msg, DST, lenInBytes) {\n    const H = exports.utils.sha256;\n    const b_in_bytes = SHA256_DIGEST_SIZE;\n    const r_in_bytes = b_in_bytes * 2;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2);\n    const b = new Array(ell);\n    const b_0 = await H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = await H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = await H(concatBytes(...args));\n    }\n    const pseudo_random_bytes = concatBytes(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\nasync function hash_to_field(msg, count, options = {}) {\n    const htfOptions = { ...htfDefaults, ...options };\n    const log2p = htfOptions.p.toString(2).length;\n    const L = Math.ceil((log2p + htfOptions.k) / 8);\n    const len_in_bytes = count * htfOptions.m * L;\n    const DST = stringToBytes(htfOptions.DST);\n    let pseudo_random_bytes = msg;\n    if (htfOptions.expand) {\n        pseudo_random_bytes = await expand_message_xmd(msg, DST, len_in_bytes);\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(htfOptions.m);\n        for (let j = 0; j < htfOptions.m; j++) {\n            const elm_offset = L * (j + i * htfOptions.m);\n            const tv = pseudo_random_bytes.slice(elm_offset, elm_offset + L);\n            e[j] = (0, math_1.mod)(os2ip(tv), htfOptions.p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction normalizePrivKey(key) {\n    let int;\n    if (key instanceof Uint8Array && key.length === 32)\n        int = bytesToNumberBE(key);\n    else if (typeof key === 'string' && key.length === 64)\n        int = BigInt(`0x${key}`);\n    else if (typeof key === 'number' && key > 0 && Number.isSafeInteger(key))\n        int = BigInt(key);\n    else if (typeof key === 'bigint' && key > 0n)\n        int = key;\n    else\n        throw new TypeError('Expected valid private key');\n    int = (0, math_1.mod)(int, math_1.CURVE.r);\n    if (!isWithinCurveOrder(int))\n        throw new Error('Private key must be 0 < key < CURVE.r');\n    return int;\n}\nfunction assertType(item, type) {\n    if (!(item instanceof type))\n        throw new Error('Expected Fp* argument, not number/bigint');\n}\nclass PointG1 extends math_1.ProjectivePoint {\n    constructor(x, y, z = math_1.Fp.ONE) {\n        super(x, y, z, math_1.Fp);\n        assertType(x, math_1.Fp);\n        assertType(y, math_1.Fp);\n        assertType(z, math_1.Fp);\n    }\n    static fromHex(bytes) {\n        bytes = ensureBytes(bytes);\n        const { P } = math_1.CURVE;\n        let point;\n        if (bytes.length === 48) {\n            const compressedValue = bytesToNumberBE(bytes);\n            const bflag = (0, math_1.mod)(compressedValue, POW_2_383) / POW_2_382;\n            if (bflag === 1n) {\n                return this.ZERO;\n            }\n            const x = new math_1.Fp((0, math_1.mod)(compressedValue, POW_2_381));\n            const right = x.pow(3n).add(new math_1.Fp(math_1.CURVE.b));\n            let y = right.sqrt();\n            if (!y)\n                throw new Error('Invalid compressed G1 point');\n            const aflag = (0, math_1.mod)(compressedValue, POW_2_382) / POW_2_381;\n            if ((y.value * 2n) / P !== aflag)\n                y = y.negate();\n            point = new PointG1(x, y);\n        }\n        else if (bytes.length === 96) {\n            if ((bytes[0] & (1 << 6)) !== 0)\n                return PointG1.ZERO;\n            const x = bytesToNumberBE(bytes.slice(0, PUBLIC_KEY_LENGTH));\n            const y = bytesToNumberBE(bytes.slice(PUBLIC_KEY_LENGTH));\n            point = new PointG1(new math_1.Fp(x), new math_1.Fp(y));\n        }\n        else {\n            throw new Error('Invalid point G1, expected 48/96 bytes');\n        }\n        point.assertValidity();\n        return point;\n    }\n    static fromPrivateKey(privateKey) {\n        return this.BASE.multiplyPrecomputed(normalizePrivKey(privateKey));\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        this.assertValidity();\n        const { P } = math_1.CURVE;\n        if (isCompressed) {\n            let hex;\n            if (this.isZero()) {\n                hex = POW_2_383 + POW_2_382;\n            }\n            else {\n                const [x, y] = this.toAffine();\n                const flag = (y.value * 2n) / P;\n                hex = x.value + flag * POW_2_381 + POW_2_383;\n            }\n            return toPaddedHex(hex, PUBLIC_KEY_LENGTH);\n        }\n        else {\n            if (this.isZero()) {\n                return '4'.padEnd(2 * 2 * PUBLIC_KEY_LENGTH, '0');\n            }\n            else {\n                const [x, y] = this.toAffine();\n                return toPaddedHex(x.value, PUBLIC_KEY_LENGTH) + toPaddedHex(y.value, PUBLIC_KEY_LENGTH);\n            }\n        }\n    }\n    assertValidity() {\n        if (this.isZero())\n            return this;\n        if (!this.isOnCurve())\n            throw new Error('Invalid G1 point: not on curve Fp');\n        if (!this.isTorsionFree())\n            throw new Error('Invalid G1 point: must be of prime-order subgroup');\n        return this;\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.toString();\n    }\n    millerLoop(P) {\n        return (0, math_1.millerLoop)(P.pairingPrecomputes(), this.toAffine());\n    }\n    clearCofactor() {\n        return this.multiplyUnsafe(math_1.CURVE.h);\n    }\n    isOnCurve() {\n        const b = new math_1.Fp(math_1.CURVE.b);\n        const { x, y, z } = this;\n        const left = y.pow(2n).multiply(z).subtract(x.pow(3n));\n        const right = b.multiply(z.pow(3n));\n        return left.subtract(right).isZero();\n    }\n    sigma() {\n        const BETA = 0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaacn;\n        const [x, y] = this.toAffine();\n        return new PointG1(x.multiply(BETA), y);\n    }\n    isTorsionFree() {\n        const c1 = 0x396c8c005555e1560000000055555555n;\n        const P = this;\n        const S = P.sigma();\n        const Q = S.double();\n        const S2 = S.sigma();\n        const left = Q.subtract(P).subtract(S2).multiplyUnsafe(c1);\n        const C = left.subtract(S2);\n        return C.isZero();\n    }\n}\nexports.PointG1 = PointG1;\nPointG1.BASE = new PointG1(new math_1.Fp(math_1.CURVE.Gx), new math_1.Fp(math_1.CURVE.Gy), math_1.Fp.ONE);\nPointG1.ZERO = new PointG1(math_1.Fp.ONE, math_1.Fp.ONE, math_1.Fp.ZERO);\nclass PointG2 extends math_1.ProjectivePoint {\n    constructor(x, y, z = math_1.Fp2.ONE) {\n        super(x, y, z, math_1.Fp2);\n        assertType(x, math_1.Fp2);\n        assertType(y, math_1.Fp2);\n        assertType(z, math_1.Fp2);\n    }\n    static async hashToCurve(msg) {\n        msg = ensureBytes(msg);\n        const u = await hash_to_field(msg, 2);\n        const Q0 = new PointG2(...(0, math_1.isogenyMapG2)((0, math_1.map_to_curve_simple_swu_9mod16)(u[0])));\n        const Q1 = new PointG2(...(0, math_1.isogenyMapG2)((0, math_1.map_to_curve_simple_swu_9mod16)(u[1])));\n        const R = Q0.add(Q1);\n        const P = R.clearCofactor();\n        return P;\n    }\n    static fromSignature(hex) {\n        hex = ensureBytes(hex);\n        const { P } = math_1.CURVE;\n        const half = hex.length / 2;\n        if (half !== 48 && half !== 96)\n            throw new Error('Invalid compressed signature length, must be 96 or 192');\n        const z1 = bytesToNumberBE(hex.slice(0, half));\n        const z2 = bytesToNumberBE(hex.slice(half));\n        const bflag1 = (0, math_1.mod)(z1, POW_2_383) / POW_2_382;\n        if (bflag1 === 1n)\n            return this.ZERO;\n        const x1 = z1 % POW_2_381;\n        const x2 = z2;\n        const x = new math_1.Fp2([x2, x1]);\n        const y2 = x.pow(3n).add(new math_1.Fp2(math_1.CURVE.b2));\n        let y = y2.sqrt();\n        if (!y)\n            throw new Error('Failed to find a square root');\n        const [y0, y1] = y.values;\n        const aflag1 = (z1 % POW_2_382) / POW_2_381;\n        const isGreater = y1 > 0n && (y1 * 2n) / P !== aflag1;\n        const isZero = y1 === 0n && (y0 * 2n) / P !== aflag1;\n        if (isGreater || isZero)\n            y = y.multiply(-1n);\n        const point = new PointG2(x, y, math_1.Fp2.ONE);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(bytes) {\n        bytes = ensureBytes(bytes);\n        let point;\n        if (bytes.length === 96) {\n            throw new Error('Compressed format not supported yet.');\n        }\n        else if (bytes.length === 192) {\n            if ((bytes[0] & (1 << 6)) !== 0) {\n                return PointG2.ZERO;\n            }\n            const x1 = bytesToNumberBE(bytes.slice(0, PUBLIC_KEY_LENGTH));\n            const x0 = bytesToNumberBE(bytes.slice(PUBLIC_KEY_LENGTH, 2 * PUBLIC_KEY_LENGTH));\n            const y1 = bytesToNumberBE(bytes.slice(2 * PUBLIC_KEY_LENGTH, 3 * PUBLIC_KEY_LENGTH));\n            const y0 = bytesToNumberBE(bytes.slice(3 * PUBLIC_KEY_LENGTH));\n            point = new PointG2(new math_1.Fp2([x0, x1]), new math_1.Fp2([y0, y1]));\n        }\n        else {\n            throw new Error('Invalid uncompressed point G2, expected 192 bytes');\n        }\n        point.assertValidity();\n        return point;\n    }\n    static fromPrivateKey(privateKey) {\n        return this.BASE.multiplyPrecomputed(normalizePrivKey(privateKey));\n    }\n    toSignature() {\n        if (this.equals(PointG2.ZERO)) {\n            const sum = POW_2_383 + POW_2_382;\n            return toPaddedHex(sum, PUBLIC_KEY_LENGTH) + toPaddedHex(0n, PUBLIC_KEY_LENGTH);\n        }\n        const [[x0, x1], [y0, y1]] = this.toAffine().map((a) => a.values);\n        const tmp = y1 > 0n ? y1 * 2n : y0 * 2n;\n        const aflag1 = tmp / math_1.CURVE.P;\n        const z1 = x1 + aflag1 * POW_2_381 + POW_2_383;\n        const z2 = x0;\n        return toPaddedHex(z1, PUBLIC_KEY_LENGTH) + toPaddedHex(z2, PUBLIC_KEY_LENGTH);\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        this.assertValidity();\n        if (isCompressed) {\n            throw new Error('Point compression has not yet been implemented');\n        }\n        else {\n            if (this.equals(PointG2.ZERO)) {\n                return '4'.padEnd(2 * 4 * PUBLIC_KEY_LENGTH, '0');\n            }\n            const [[x0, x1], [y0, y1]] = this.toAffine().map((a) => a.values);\n            return (toPaddedHex(x1, PUBLIC_KEY_LENGTH) +\n                toPaddedHex(x0, PUBLIC_KEY_LENGTH) +\n                toPaddedHex(y1, PUBLIC_KEY_LENGTH) +\n                toPaddedHex(y0, PUBLIC_KEY_LENGTH));\n        }\n    }\n    assertValidity() {\n        if (this.isZero())\n            return this;\n        if (!this.isOnCurve())\n            throw new Error('Invalid G2 point: not on curve Fp2');\n        if (!this.isTorsionFree())\n            throw new Error('Invalid G2 point: must be of prime-order subgroup');\n        return this;\n    }\n    psi() {\n        return this.fromAffineTuple((0, math_1.psi)(...this.toAffine()));\n    }\n    psi2() {\n        return this.fromAffineTuple((0, math_1.psi2)(...this.toAffine()));\n    }\n    mulNegX() {\n        return this.multiplyUnsafe(math_1.CURVE.x).negate();\n    }\n    clearCofactor() {\n        const P = this;\n        let t1 = P.mulNegX();\n        let t2 = P.psi();\n        let t3 = P.double();\n        t3 = t3.psi2();\n        t3 = t3.subtract(t2);\n        t2 = t1.add(t2);\n        t2 = t2.mulNegX();\n        t3 = t3.add(t2);\n        t3 = t3.subtract(t1);\n        const Q = t3.subtract(P);\n        return Q;\n    }\n    isOnCurve() {\n        const b = new math_1.Fp2(math_1.CURVE.b2);\n        const { x, y, z } = this;\n        const left = y.pow(2n).multiply(z).subtract(x.pow(3n));\n        const right = b.multiply(z.pow(3n));\n        return left.subtract(right).isZero();\n    }\n    isTorsionFree() {\n        const P = this;\n        const psi2 = P.psi2();\n        const psi3 = psi2.psi();\n        const zPsi3 = psi3.mulNegX();\n        return zPsi3.subtract(psi2).add(P).isZero();\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.toString();\n    }\n    clearPairingPrecomputes() {\n        this._PPRECOMPUTES = undefined;\n    }\n    pairingPrecomputes() {\n        if (this._PPRECOMPUTES)\n            return this._PPRECOMPUTES;\n        this._PPRECOMPUTES = (0, math_1.calcPairingPrecomputes)(...this.toAffine());\n        return this._PPRECOMPUTES;\n    }\n}\nexports.PointG2 = PointG2;\nPointG2.BASE = new PointG2(new math_1.Fp2(math_1.CURVE.G2x), new math_1.Fp2(math_1.CURVE.G2y), math_1.Fp2.ONE);\nPointG2.ZERO = new PointG2(math_1.Fp2.ONE, math_1.Fp2.ONE, math_1.Fp2.ZERO);\nfunction pairing(P, Q, withFinalExponent = true) {\n    if (P.isZero() || Q.isZero())\n        throw new Error('No pairings at point of Infinity');\n    P.assertValidity();\n    Q.assertValidity();\n    const looped = P.millerLoop(Q);\n    return withFinalExponent ? looped.finalExponentiate() : looped;\n}\nexports.pairing = pairing;\nfunction normP1(point) {\n    return point instanceof PointG1 ? point : PointG1.fromHex(point);\n}\nfunction normP2(point) {\n    return point instanceof PointG2 ? point : PointG2.fromSignature(point);\n}\nasync function normP2Hash(point) {\n    return point instanceof PointG2 ? point : PointG2.hashToCurve(point);\n}\nfunction getPublicKey(privateKey) {\n    const bytes = PointG1.fromPrivateKey(privateKey).toRawBytes(true);\n    return typeof privateKey === 'string' ? bytesToHex(bytes) : bytes;\n}\nexports.getPublicKey = getPublicKey;\nasync function sign(message, privateKey) {\n    const msgPoint = await normP2Hash(message);\n    msgPoint.assertValidity();\n    const sigPoint = msgPoint.multiply(normalizePrivKey(privateKey));\n    if (message instanceof PointG2)\n        return sigPoint;\n    const hex = sigPoint.toSignature();\n    return typeof message === 'string' ? hex : hexToBytes(hex);\n}\nexports.sign = sign;\nasync function verify(signature, message, publicKey) {\n    const P = normP1(publicKey);\n    const Hm = await normP2Hash(message);\n    const G = PointG1.BASE;\n    const S = normP2(signature);\n    const ePHm = pairing(P.negate(), Hm, false);\n    const eGS = pairing(G, S, false);\n    const exp = eGS.multiply(ePHm).finalExponentiate();\n    return exp.equals(math_1.Fp12.ONE);\n}\nexports.verify = verify;\nfunction aggregatePublicKeys(publicKeys) {\n    if (!publicKeys.length)\n        throw new Error('Expected non-empty array');\n    const agg = publicKeys.map(normP1).reduce((sum, p) => sum.add(p), PointG1.ZERO);\n    if (publicKeys[0] instanceof PointG1)\n        return agg.assertValidity();\n    const bytes = agg.toRawBytes(true);\n    if (publicKeys[0] instanceof Uint8Array)\n        return bytes;\n    return bytesToHex(bytes);\n}\nexports.aggregatePublicKeys = aggregatePublicKeys;\nfunction aggregateSignatures(signatures) {\n    if (!signatures.length)\n        throw new Error('Expected non-empty array');\n    const agg = signatures.map(normP2).reduce((sum, s) => sum.add(s), PointG2.ZERO);\n    if (signatures[0] instanceof PointG2)\n        return agg.assertValidity();\n    const bytes = agg.toSignature();\n    if (signatures[0] instanceof Uint8Array)\n        return hexToBytes(bytes);\n    return bytes;\n}\nexports.aggregateSignatures = aggregateSignatures;\nasync function verifyBatch(signature, messages, publicKeys) {\n    if (!messages.length)\n        throw new Error('Expected non-empty messages array');\n    if (publicKeys.length !== messages.length)\n        throw new Error('Pubkey count should equal msg count');\n    const sig = normP2(signature);\n    const nMessages = await Promise.all(messages.map(normP2Hash));\n    const nPublicKeys = publicKeys.map(normP1);\n    try {\n        const paired = [];\n        for (const message of new Set(nMessages)) {\n            const groupPublicKey = nMessages.reduce((groupPublicKey, subMessage, i) => subMessage === message ? groupPublicKey.add(nPublicKeys[i]) : groupPublicKey, PointG1.ZERO);\n            paired.push(pairing(groupPublicKey, message, false));\n        }\n        paired.push(pairing(PointG1.BASE.negate(), sig, false));\n        const product = paired.reduce((a, b) => a.multiply(b), math_1.Fp12.ONE);\n        const exp = product.finalExponentiate();\n        return exp.equals(math_1.Fp12.ONE);\n    }\n    catch {\n        return false;\n    }\n}\nexports.verifyBatch = verifyBatch;\nPointG1.BASE.calcMultiplyPrecomputes(4);\n", "import { PointG1, PointG2, pairing, Fp12 } from '@noble/bls12-381';\n\nimport { frOfHex, bigEndianToLittleEndian, bigIntOfHex } from './utils';\n\n// G1\n\nconst addG1 = (byteString1: string, byteString2: string): string => {\n    const point1 = PointG1.fromHex(byteString1);\n    point1.assertValidity();\n    const point2 = PointG1.fromHex(byteString2);\n    point2.assertValidity();\n    return point1.add(point2).toHex();\n};\n\nconst negateG1 = (byteString: string): string => {\n    const g1 = PointG1.fromHex(byteString).negate();\n    g1.assertValidity();\n    return g1.toHex();\n};\n\nconst multiplyG1ByFr = (byteString1: string, byteString2: string): string => {\n    const g1 = PointG1.fromHex(byteString1);\n    g1.assertValidity();\n    return g1.multiply(bigIntOfHex(bigEndianToLittleEndian(byteString2))).toHex();\n};\n\n// G2\n\nconst addG2 = (byteString1: string, byteString2: string): string => {\n    const point1 = PointG2.fromHex(byteString1);\n    point1.assertValidity();\n    const point2 = PointG2.fromHex(byteString2);\n    point2.assertValidity();\n    return point1.add(point2).toHex();\n};\n\nconst negateG2 = (byteString: string): string => {\n    const g2 = PointG2.fromHex(byteString).negate();\n    g2.assertValidity();\n    return g2.toHex();\n};\n\nconst multiplyG2ByFr = (byteString1: string, byteString2: string): string => {\n    const g2 = PointG2.fromHex(byteString1);\n    g2.assertValidity();\n    return g2.multiply(bigIntOfHex(bigEndianToLittleEndian(byteString2))).toHex();\n};\n\n// Fr\n\nconst addFr = (byteString1: string, byteString2: string): string => {\n    const frOne = frOfHex(byteString1);\n    const frTwo = frOfHex(byteString2);\n    return bigEndianToLittleEndian(frOne.add(frTwo).toString());\n};\n\nconst negateFr = (byteString: string): string => {\n    const fr = frOfHex(byteString);\n    return bigEndianToLittleEndian(fr.negate().toString());\n};\n\nconst multiplyFrByFr = (byteString1: string, byteString2: string): string => {\n    const frOne = frOfHex(byteString1);\n    const frTwo = frOfHex(byteString2);\n    return bigEndianToLittleEndian(frOne.multiply(frTwo).toString());\n};\n\nconst multiplyFrByInt = (byteString: string, int: string | number): string => {\n    return bigEndianToLittleEndian(frOfHex(byteString).multiply(BigInt(int)).toString());\n};\n\nconst convertFrToInt = (byteString: string): string => {\n    return bigIntOfHex(bigEndianToLittleEndian(byteString)).toString(10);\n};\n\n/**\n * PAIRING_CHECK:\n * Verify that the product of pairings of the given list of points is equal to 1 in Fq12. Returns true if the list is empty.\n * Can be used to verify if two pairings P1 and P2 are equal by verifying P1 * P2^(-1) = 1.\n */\nconst pairingCheck = (list: string[][]): boolean => {\n    let valid = true; // Returns true if the list is empty.\n\n    if (list.length > 0) {\n        const pair1G1 = PointG1.fromHex(list[0][0]);\n        pair1G1.assertValidity();\n        const pair1G2 = PointG2.fromHex(list[0][1]);\n        pair1G2.assertValidity();\n        const pair2G1 = PointG1.fromHex(list[1][0]);\n        pair2G1.assertValidity();\n        const pair2G2 = PointG2.fromHex(list[1][1]);\n        pair2G2.assertValidity();\n        const pair1 = pairing(pair1G1, pair1G2);\n        const pair2 = pairing(pair2G1, pair2G2);\n        valid = pair1.multiply(pair2).equals(Fp12.ONE);\n    }\n\n    return valid;\n};\n\nconst Bls12 = {\n    addG1,\n    addG2,\n    addFr,\n    multiplyG1ByFr,\n    multiplyG2ByFr,\n    multiplyFrByFr,\n    multiplyFrByInt,\n    negateG1,\n    negateG2,\n    negateFr,\n    convertFrToInt,\n    pairingCheck,\n};\n\nexport default Bls12;\n", "import { Fr } from '@noble/bls12-381';\n\n/**\n * @description Convert hexadecimal to a Prime Field.\n *\n * @param {string} byteString\n *\n * @return {Fr} Prime Field\n */\nexport const frOfHex = (byteString: string): Fr => {\n    return new Fr(bigIntOfHex(bigEndianToLittleEndian(byteString)));\n};\n\n/**\n * @description Convert hexadecimal big endian to little endian.\n *\n * @param {string} byteString - e.g. 000000000000000000000000000000000000000000000000000126ad20e84000\n *\n * @return {string} - e.g. 0040e820ad260100000000000000000000000000000000000000000000000000\n */\nexport const bigEndianToLittleEndian = (byteString: string): string => {\n    if (byteString.startsWith('0x')) {\n        byteString = byteString.slice(2);\n    }\n    const len = byteString.length;\n    let bigEndianHexString = '';\n    for (let i = 0; i < len / 2; i++) {\n        bigEndianHexString += byteString.substring(len - (i + 1) * 2, len - i * 2);\n    }\n    return bigEndianHexString;\n};\n\n/**\n * @description Convert hexadecimal to big int.\n *\n * @param {string} byteString\n *\n * @return {bigint}\n */\nexport const bigIntOfHex = (hex: string): bigint => BigInt(`0x${hex}`);\n"],
  "mappings": "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",
  "names": []
}
